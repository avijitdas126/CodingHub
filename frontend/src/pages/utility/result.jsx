/* This code snippet is a React component named `Result` that renders an iframe to display HTML, CSS,
and JavaScript content. It also includes a console area to show logs and warnings generated by the
JavaScript code executed within the iframe. */
import React, { useEffect, useRef, useState } from "react";
import { ArrowBigUpDash } from "lucide-react";
import Console from "./console";
// import '../../index.css'

function Result(props) {
  let {
    html,
    css,
    js,
    console = true,
    className = "",
    scrolling = true,
  } = props;
  const iframeRef = useRef(null);
  const [logs, setLogs] = useState([]);
  const [warn, setwarn] = useState([]);
  const [active, setactive] = useState(true);
  const handleactive = () => {
    setactive(!active);
  };
  useEffect(() => {
    const iframe = iframeRef.current;
    if (iframe) {
      // Update iframe content
      iframe.contentDocument.body.innerHTML =
        html + "<style>" + css + "</style>";

      // Override console.log in iframe
      iframe.contentWindow.console.log = (message) => {
        addLog(message);
      };
      // Override console.log in iframe
      iframe.contentWindow.console.warn = (message) => {
        addwarn(message);
      };
      try {
        iframe.contentWindow.eval(js);
      } catch (error) {
        addLog("Error : " + error.message);
      }
      // Execute JavaScript code in iframe
    }
  }, [html, css, js]);
  const addwarn = (message) => {
    setwarn((prevLogs) => [...prevLogs, message]);
  };
  const addLog = (message) => {
    setLogs((prevLogs) => [...prevLogs, message]);
  };
  return (
    <>
      <div>
        <iframe
          ref={iframeRef}
          scrolling={`${scrolling ? "yes" : "no"}`}
          className={`${
            console ? "w-full h-[400px]" : "w-[20%] h-[150px]"
          } ${className}`}
        ></iframe>

        <div
          className={`${
            console ? "" : "hidden"
          } flex gap-10 p-2 rounded cursor-pointer bg-gray-950 text-white uppercase font-bold ${
            active ? "" : "logs"
          }`}
          onClick={handleactive}
        >
          <ArrowBigUpDash />
          console
        </div>
        <div className={`${active ? "hidden" : "block log"}`}>
          {logs.map((log, index) => (
            <Console key={index} log={log} />
          ))}
          {warn.map((log, index) => (
            <Console key={index} warn={log} />
          ))}
        </div>
      </div>
    </>
  );
}

export default React.memo(Result);
